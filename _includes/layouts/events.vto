---
layout: layouts/base.vto
---

{{
  set monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ]
}}
{{
  set shortMonthNames = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ]
}}
{{ set weekDays = ["M", "T", "W", "T", "F", "S", "S"] }}

{{# Helper function to get ISO week number #}}
{{
  set getISOWeek = (dateStr) => {
    // Parse date string to components
    const [year, month, day] = dateStr.split("-").map(n => parseInt(n, 10));

    // Create date in UTC to avoid timezone issues - use noon to avoid DST issues
    const date = new Date(Date.UTC(year, month - 1, day, 12, 0, 0, 0));

    // Make a copy
    const d = new Date(date.valueOf());

    // ISO week starts on Monday, make Sunday = 7
    const dayOfWeek = d.getUTCDay() || 7;

    // Find the Thursday of the current week
    d.setUTCDate(d.getUTCDate() + 4 - dayOfWeek);

    // The year of that Thursday determines the ISO year
    const isoYear = d.getUTCFullYear();

    // Find January 4th of that year (always in week 1)
    const jan4 = new Date(Date.UTC(isoYear, 0, 4, 12, 0, 0, 0));

    // Find Monday of week 1
    const jan4Day = jan4.getUTCDay() || 7;
    const week1Monday = new Date(jan4.valueOf());
    week1Monday.setUTCDate(jan4.getUTCDate() - jan4Day + 1);

    // Calculate weeks between
    const weekDiff = Math.round(
      (d.valueOf() - week1Monday.valueOf()) / (7 * 86400000),
    );

    return weekDiff + 1;
  }
}}

{{# Get unique years from events #}}
{{ set eventYears = [] }}
{{ for event of events }}
  {{
    set dateStr = typeof event.start_date === "string"
    ? event.start_date
    : event.start_date.toISOString().split("T")[0]
  }}
  {{ set year = parseInt(dateStr.substring(0, 4)) }}
  {{ if !eventYears.includes(year) }}
    {{ set _ = eventYears.push(year) }}
  {{ /if }}
{{ /for }}
{{ set _ = eventYears.sort() }}

{{# Current year (default to first year with events) #}}
{{ set currentYear = new Date().getFullYear() }}
{{ if !eventYears.includes(currentYear) }}
  {{ set currentYear = eventYears[0] }}
{{ /if }}

<div class="pt-24" x-data="eventsPage()" @resize.window="checkScreenSize()">
  <div class="max-w-6xl mx-auto px-6">
    <header class="mb-8">
      <h1 class="text-4xl sm:text-5xl font-bold text-white mb-4">
        {{ title }} <span x-text="currentYear">{{ currentYear }}</span>
      </h1>
      <p class="text-lg text-gray-300">{{ description }}</p>
    </header>

    {{# Year Navigation #}}
    <div class="flex justify-center mb-8">
      <div class="flex gap-2">
        <template x-for="(yearData, idx) in yearNavigation" :key="idx">
          <button
            x-show="yearData.show"
            @click="navigateToYear(yearData.year)"
            class="px-4 py-2 bg-white text-gray-800 rounded-lg hover:bg-gray-100 transition-colors font-semibold"
            x-html="yearData.label"
          >
          </button>
        </template>
      </div>
    </div>

    {{# Organization Filter #}}
    <div class="mb-8" x-cloak>
      <div class="flex flex-col gap-4">
        <label class="text-white font-semibold">Filter by Organization:</label>
        <div class="flex flex-wrap gap-2">
          {{
            for org of organizations.sort((a, b) => a.name.localeCompare(b.name))
          }}
            {{# Check if org has events in any year #}}
            {{ set hasEvents = events.some(e => e.by === org.id) }}
            {{ if hasEvents }}
              <button
                @click="toggleOrganization('{{ org.id }}')"
                :class="selectedOrgs.includes('{{ org.id }}') ? 'bg-[#eb4e3b] text-white hover:bg-[#f69b39]' : 'bg-white text-gray-800 hover:bg-gray-100'"
                class="px-3 py-1 rounded-lg transition-colors text-sm"
                x-show="hasEventsInYear('{{ org.id }}')"
              >
                {{ org.name }}
              </button>
            {{ /if }}
          {{ /for }}
          <button
            x-show="selectedOrgs.length > 0"
            @click="clearFilters()"
            class="px-3 py-1 bg-gray-600 text-white rounded-lg transition-colors text-sm hover:bg-gray-700 hidden"
            :class="{'hidden': selectedOrgs.length === 0}"
          >
            Clear All
          </button>
        </div>
      </div>
    </div>

    {{# Calendar Grid #}}
    <div
      class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6"
      id="calendarGrid"
    >
      {{ for year of eventYears }}
        {{ for monthIndex of [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] }}
          {{ set monthName = monthNames[monthIndex] }}
          {{ set daysInMonth = new Date(year, monthIndex + 1, 0).getDate() }}
          {{ set firstDayRaw = new Date(year, monthIndex, 1).getDay() }}
          {{
            set firstDay = (firstDayRaw + 6) % 7
          }}{{# Convert Sunday=0 to Monday=0 #}}

          <div
            class="bg-white rounded-xl shadow-md month-card flex flex-col"
            data-year="{{ year }}"
            data-month="{{ monthIndex }}"
            x-show="currentYear === {{ year }}"
            x-data="{ collapsed: shouldCollapseMonth({{ year }}, {{ monthIndex }}) }"
            x-init="$watch('isMobile', value => collapsed = value && shouldCollapseMonth({{ year }}, {{ monthIndex }}))"
          >
            <div
              class="bg-gray-800 text-white px-4 py-3 relative cursor-pointer lg:cursor-default"
              @click="if (isMobile) collapsed = !collapsed"
            >
              <h2 class="text-xl font-semibold flex items-center justify-between">
                <span>{{ monthName }}</span>
                <svg
                  x-show="isMobile"
                  class="w-5 h-5 transition-transform"
                  :class="{'rotate-180': !collapsed}"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 9l-7 7-7-7"
                  >
                  </path>
                </svg>
              </h2>
            </div>

            <div
              class="p-4 bg-white flex-1 rounded-xl"
              x-show="!collapsed"
              x-transition
            >
              <div class="grid grid-cols-8 gap-1 text-xs">
                {{# Week day headers #}}
                <div></div>
                {{ for day of weekDays }}
                  <div class="font-semibold text-gray-700 text-center">
                    {{ day }}
                  </div>
                {{ /for }}

                {{# Generate calendar with proper week structure #}}

                {{# Calculate total weeks needed #}}
                {{ set totalDays = firstDay + daysInMonth }}
                {{ set totalWeeks = Math.ceil(totalDays / 7) }}

                {{# Generate each week row #}}
                {{ for weekIndex of [...Array(totalWeeks).keys()] }}
                  {{# Calculate first day of this week row #}}
                  {{ set weekStartDay = weekIndex * 7 - firstDay + 1 }}
                  {{ set weekEndDay = Math.min(weekStartDay + 6, daysInMonth) }}

                  {{# Add week number for this row #}}
                  {{ if weekStartDay <= daysInMonth }}
                    {{# Get the Monday date for this week row to calculate correct ISO week #}}
                    {{ if weekStartDay < 1 }}
                      {{# This week starts in the previous month, find the Monday #}}
                      {{
                        set prevMonth = monthIndex === 0 ? 11 : monthIndex - 1
                      }}
                      {{ set prevYear = monthIndex === 0 ? year - 1 : year }}
                      {{
                        set daysInPrevMonth = new Date(prevYear, prevMonth + 1, 0).getDate()
                      }}
                      {{ set mondayDate = daysInPrevMonth + weekStartDay }}
                      {{
                        set weekNum = getISOWeek(
                          `${prevYear}-${
                            String(prevMonth + 1).padStart(2, "0")
                          }-${String(mondayDate).padStart(2, "0")}`,
                        )
                      }}
                    {{ else }}
                      {{# Find the Monday of this week (could be in current month) #}}
                      {{ set mondayDay = weekStartDay }}
                      {{
                        set weekNum = getISOWeek(
                          `${year}-${
                            String(monthIndex + 1).padStart(2, "0")
                          }-${String(mondayDay).padStart(2, "0")}`,
                        )
                      }}
                    {{ /if }}
                    <div class="text-gray-400 text-center text-[10px] font-medium self-center">
                      W{{ String(weekNum).padStart(2, "0") }}
                    </div>
                  {{ else }}
                    <div></div>
                  {{ /if }}

                  {{# Generate 7 day cells for this week #}}
                  {{ for dayIndex of [...Array(7).keys()] }}
                    {{ set day = weekIndex * 7 + dayIndex - firstDay + 1 }}

                    {{ if day < 1 || day > daysInMonth }}
                      {{# Empty cell for days outside the month #}}
                      <div></div>
                    {{ else }}
                      {{# Check for events on this day #}}
                      {{
                        set dateStr = `${year}-${
                          String(monthIndex + 1).padStart(2, "0")
                        }-${String(day).padStart(2, "0")}`
                      }}
                      {{
                        set dayEvents = events.filter(e => {
                          const startDate = typeof e.start_date === "string"
                            ? e.start_date
                            : e.start_date.toISOString().split("T")[0];
                          const endDate = e.end_date
                            ? (typeof e.end_date === "string"
                              ? e.end_date
                              : e.end_date.toISOString().split("T")[0])
                            : startDate;
                          return startDate <= dateStr && endDate >= dateStr;
                        })
                      }}

                      {{ set eventOrgs = dayEvents.map(e => `'${e.by}'`) }}
                      {{
                        set eventOrgsStr = eventOrgs.length > 0
                        ? `[${eventOrgs.join(",")}]`
                        : "[]"
                      }}

                      <div
                        class="relative calendar-cell"
                        data-date="{{ dateStr }}"
                      >
                        {{ if dayEvents.length > 0 }}
                          <button
                            type="button"
                            @click="showEventModal({{ year }}, {{ monthIndex }}, {{ day }}, $event)"
                            class="event-day w-full text-center p-1 rounded font-semibold cursor-pointer transition-colors"
                            :class="{
                              'bg-gray-100 text-gray-500 hover:bg-gray-200': isPastDate({{ year }}, {{ monthIndex }}, {{ day }}),
                              'bg-[#eb4e3b] text-white hover:bg-[#f69b39]': !isPastDate({{ year }}, {{ monthIndex }}, {{ day }}) && !isToday({{ year }}, {{ monthIndex }}, {{ day }}),
                              'bg-[#f1c40f] text-gray-900 hover:bg-yellow-300': isToday({{ year }}, {{ monthIndex }}, {{ day }})
                            }"
                            x-show="shouldShowEvents({{ eventOrgsStr }})"
                            data-events="{{ JSON.stringify(dayEvents).replace(/"/g, '&quot;') }}"
                          >
                            {{ day }}
                          </button>
                          <div
                            x-show="!shouldShowEvents({{ eventOrgsStr }})"
                            class="calendar-day text-center p-1 rounded"
                            :class="{
                              'text-gray-400': isPastDate({{ year }}, {{ monthIndex }}, {{ day }}),
                              'text-gray-700': !isPastDate({{ year }}, {{ monthIndex }}, {{ day }}) && !isToday({{ year }}, {{ monthIndex }}, {{ day }}),
                              'bg-[#f1c40f] text-gray-900 font-semibold': isToday({{ year }}, {{ monthIndex }}, {{ day }})
                            }"
                          >
                            {{ day }}
                          </div>
                        {{ else }}
                          <div
                            class="calendar-day text-center p-1 rounded"
                            :class="{
                              'text-gray-400': isPastDate({{ year }}, {{ monthIndex }}, {{ day }}),
                              'text-gray-700': !isPastDate({{ year }}, {{ monthIndex }}, {{ day }}) && !isToday({{ year }}, {{ monthIndex }}, {{ day }}),
                              'bg-[#f1c40f] text-gray-900 font-semibold': isToday({{ year }}, {{ monthIndex }}, {{ day }})
                            }"
                          >
                            {{ day }}
                          </div>
                        {{ /if }}
                      </div>
                    {{ /if }}
                  {{ /for }}
                {{ /for }}
              </div>
            </div>
          </div>
        {{ /for }}
      {{ /for }}
    </div>

    {{# Events List #}}
    <section class="mt-12">
      <h2 class="text-2xl font-bold text-white mb-6">
        <span
          x-text="currentYear === new Date().getFullYear() ? 'Upcoming Events' : 'Events'"
        ></span>
      </h2>

      <div class="space-y-6">
        {{# Sort events by start_date #}}
        {{
          set sortedEvents = events.sort((a, b) => {
            const aDate = typeof a.start_date === "string"
              ? a.start_date
              : a.start_date.toISOString().split("T")[0];
            const bDate = typeof b.start_date === "string"
              ? b.start_date
              : b.start_date.toISOString().split("T")[0];
            return aDate.localeCompare(bDate);
          })
        }}
        {{ for event of sortedEvents }}
          {{
            set startDateStr = typeof event.start_date === "string"
            ? event.start_date
            : event.start_date.toISOString().split("T")[0]
          }}
          {{ set eventYear = parseInt(startDateStr.substring(0, 4)) }}
          {{ set eventMonth = parseInt(startDateStr.substring(5, 7)) - 1 }}
          {{ set eventDay = parseInt(startDateStr.substring(8, 10)) }}
          {{ set eventWeek = getISOWeek(startDateStr) }}
          {{ set org = organizations.find(o => o.id === event.by) }}

          <div
            class="event-card bg-white rounded-lg border border-gray-200 hover:border-gray-300 hover:shadow-lg transition-all duration-200"
            x-show="shouldShowEvent('{{ event.by }}', {{ eventYear }}, '{{ startDateStr }}')"
            data-event-org="{{ event.by }}"
            data-event-year="{{ eventYear }}"
            data-event-date="{{ startDateStr }}"
          >
            <div class="p-5 sm:p-6">
              <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4">
                <div class="flex-1">
                  {{# Event Name #}}
                  <h3 class="text-lg font-semibold mb-2">
                    <a
                      href="{{ event.website }}"
                      target="_blank"
                      class="text-gray-900 hover:text-[#eb4e3b] transition-colors"
                    >
                      {{ event.name }}
                    </a>
                  </h3>

                  {{# Organization #}}
                  {{ if org }}
                    <p class="text-sm text-gray-600">
                      by {{ if org.website }}
                        <a
                          href="{{ org.website }}"
                          target="_blank"
                          class="hover:text-[#eb4e3b] transition-colors"
                        >{{ org.name }}</a>
                      {{ else }}
                        {{ org.name }}
                      {{ /if }}
                    </p>
                  {{ /if }}
                </div>

                {{# Date and Location Section #}}
                <div class="sm:text-right space-y-1">
                  <div class="flex items-center sm:justify-end gap-2">
                    <p class="text-base font-medium text-gray-900">
                      {{
                        set endDateStr = event.end_date
                        ? (typeof event.end_date
                            === "string"
                          ? event.end_date
                          : event.end_date.toISOString()
                            .split("T")[0])
                        : startDateStr
                      }}
                      {{ if startDateStr === endDateStr || !event.end_date }}
                        {{ monthNames[eventMonth] }}
                        {{ eventDay }}, {{ eventYear }}
                      {{ else }}
                        {{
                          set endMonth = parseInt(
                            endDateStr.substring(5, 7),
                          ) - 1
                        }}
                        {{
                          set endDay = parseInt(
                            endDateStr.substring(8, 10),
                          )
                        }}
                        {{
                          set endYear = parseInt(
                            endDateStr.substring(0, 4),
                          )
                        }}
                        {{
                          if eventMonth === endMonth && eventYear === endYear
                        }}
                          {{# Same month and year #}}
                          {{ monthNames[eventMonth] }}
                          {{ eventDay }}-{{ endDay }}, {{ eventYear }}
                        {{ else if eventYear === endYear }}
                          {{# Different months, same year #}}
                          {{ shortMonthNames[eventMonth] }}
                          {{ eventDay }} - {{ shortMonthNames[endMonth] }}
                          {{ endDay }}, {{ eventYear }}
                        {{ else }}
                          {{# Different years #}}
                          {{ shortMonthNames[eventMonth] }}
                          {{ eventDay }}, {{ eventYear }} - {{
                            shortMonthNames[endMonth]
                          }}
                          {{ endDay }}, {{ endYear }}
                        {{ /if }}
                      {{ /if }}
                    </p>

                    {{# Add to Calendar Button #}}
                    <button
                      @click="addToCalendar('{{ event.name }}', '{{ startDateStr }}', '{{ event.end_date ? (typeof event.end_date === 'string' ? event.end_date : event.end_date.toISOString().split('T')[0]) : startDateStr }}', '{{ event.city || '' }}', '{{ event.website }}')"
                      class="inline-flex items-center py-1 text-gray-400 hover:text-[#eb4e3b] transition-colors"
                      title="Add to calendar"
                    >
                      <svg
                        class="w-4 h-4"
                        fill="currentColor"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 16 16"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M4.653 1a.75.75 0 0 0-1.5 0v.874c-.715.137-1.33.394-1.833.898C.732 3.36.48 4.099.363 4.973.25 5.813.25 6.881.25 8.203v.594l.113 3.231c.117.874.369 1.613.957 2.201s1.327.84 2.201.957c.841.113 1.909.113 3.231.113h1.523a.75.75 0 1 0 0-1.5H6.806c-1.39 0-2.357-.002-3.086-.1-.707-.095-1.078-.268-1.34-.531s-.436-.633-.531-1.34c-.098-.729-.1-1.696-.1-3.086v-.484l.001-.702h12.047v.64l-.004.077a.75.75 0 1 0 1.5 0h.004V8.22l-.113-3.243c-.117-.876-.369-1.617-.957-2.205-.503-.503-1.118-.76-1.833-.898V1a.75.75 0 1 0-1.5 0v.725l-2.099-.024H6.75c-.788 0-1.485 0-2.099.024V1zm9.118 5.056H1.777l.073-.884c.095-.707.268-1.078.531-1.34s.633-.436 1.34-.531c.729-.098 1.696-.1 3.086-.1h1.935l3.086.1c.707.095 1.078.268 1.34.531s.436.633.531 1.344q.052.388.072.88m-1.247 3.218a.75.75 0 0 1 .75.75v1.75h1.75a.75.75 0 1 1 0 1.5h-1.75v1.75a.75.75 0 1 1-1.5 0v-1.75h-1.75a.75.75 0 1 1 0-1.5h1.75v-1.75a.75.75 0 0 1 .75-.75"
                        >
                        </path>
                      </svg>
                    </button>
                  </div>

                  {{# Location #}}
                  {{ if event.city }}
                    <p class="flex items-center text-sm text-gray-600 sm:justify-end">
                      <svg
                        class="w-4 h-4 mr-1.5 text-gray-400"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
                          clip-rule="evenodd"
                        >
                        </path>
                      </svg>
                      {{ event.city }}
                    </p>
                  {{ /if }}
                </div>
              </div>
            </div>
          </div>
        {{ /for }}
      </div>
    </section>

    {{# Add Event Invitation #}}
    <section class="mt-12 text-center">
      <div class="bg-white/10 backdrop-blur-sm rounded-xl p-6 sm:p-8 max-w-2xl mx-auto flex flex-col items-center gap-4 sm:gap-5">
        <h3 class="text-lg sm:text-xl font-semibold text-white">
          Missing your favorite event?
        </h3>
        <p class="text-sm sm:text-base text-gray-300">
          Help the community discover conferences, meetups, hackathons, workshops, and other gatherings. If it brings people together, it belongs here!
        </p>
        <a
          href="https://github.com/wewillcraft/wewillcraft.github.io/blob/main/events/index.yml"
          target="_blank"
          class="inline-block px-4 sm:px-6 py-2.5 sm:py-3 bg-[#eb4e3b] text-white rounded-lg hover:bg-[#f69b39] transition-colors font-medium text-sm sm:text-base"
        >
          <svg class="inline-block w-4 h-4 sm:w-5 sm:h-5 align-text-bottom mr-2" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path>
          </svg>
          Add Your Event via GitHub
        </a>
        <p class="text-xs sm:text-sm text-gray-400">
          Just submit a quick PR to <a href="https://github.com/wewillcraft/wewillcraft.github.io/blob/main/events/index.yml" target="_blank" class="text-gray-300 hover:text-white underline"><code>events/index.yml</code></a> and we'll add it!
        </p>
      </div>
    </section>
  </div>

  {{# Event Modal - Must be inside x-data scope #}}
  <div id="eventModal" class="fixed inset-0 z-50" x-show="modalOpen" x-cloak>
    <div class="fixed inset-0 bg-black bg-opacity-50" @click="closeModal()">
    </div>

    <div class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg shadow-2xl w-[calc(100%-2rem)] max-w-lg max-h-[90vh] overflow-y-auto">
      <div class="sticky top-0 bg-white border-b px-6 py-4 flex justify-between items-center">
        <h2 class="text-xl font-semibold text-gray-900" x-text="modalTitle">
        </h2>
        <button
          @click="closeModal()"
          class="text-gray-400 hover:text-gray-600 transition-colors"
          aria-label="Close modal"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            >
            </path>
          </svg>
        </button>
      </div>
      <div class="px-6 py-4">
        <div class="space-y-3">
          <template x-for="event in modalEvents" :key="event.name">
            <div class="border-l-2 border-gray-200 pl-4 pb-2">
              <h3 class="font-semibold text-base mb-1">
                <a
                  :href="event.website"
                  target="_blank"
                  class="text-gray-900 hover:text-[#eb4e3b] transition-colors"
                  x-text="event.name"
                ></a>
              </h3>
              <template x-if="event.org">
                <p class="text-sm text-gray-600">
                  <span>by </span>
                  <a
                    x-show="event.orgWebsite"
                    :href="event.orgWebsite"
                    target="_blank"
                    class="hover:text-[#eb4e3b] transition-colors"
                    x-text="event.org"
                  ></a>
                  <span x-show="!event.orgWebsite" x-text="event.org"></span>
                </p>
              </template>
              <template x-if="event.city">
                <p class="flex items-center text-sm text-gray-600 mt-1">
                  <svg
                    class="w-4 h-4 mr-1.5 text-gray-400"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
                      clip-rule="evenodd"
                    >
                    </path>
                  </svg>
                  <span x-text="event.city"></span>
                </p>
              </template>
            </div>
          </template>
        </div>
      </div>
    </div>
  </div>
</div>

{{# Data injection using hidden div with data attributes #}}
<div
  id="page-data"
  style="display: none"
  data-events="{{ JSON.stringify(events.map(e => ({
    ...e,
    start_date: typeof e.start_date === 'string' ? e.start_date : e.start_date.toISOString().split('T')[0],
    end_date: e.end_date ? (typeof e.end_date === 'string' ? e.end_date : e.end_date.toISOString().split('T')[0]) : null
  }))).replace(/"/g, '&quot;') }}"
  data-organizations="{{ JSON.stringify(organizations).replace(/"/g, '&quot;') }}"
  data-event-years="{{ JSON.stringify(eventYears).replace(/"/g, '&quot;') }}"
  data-current-year="{{ currentYear }}"
>
</div>

<script
  src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"
  defer
></script>
<script>
function eventsPage() {
  // Get data from the hidden div's data attributes
  const dataElement = document.getElementById("page-data");
  const events = JSON.parse(dataElement.dataset.events);
  const organizations = JSON.parse(dataElement.dataset.organizations);
  const eventYears = JSON.parse(dataElement.dataset.eventYears);
  const currentYear = parseInt(dataElement.dataset.currentYear);

  return {
    currentYear: currentYear || new Date().getFullYear(),
    selectedOrgs: [],
    modalOpen: false,
    modalTitle: "",
    modalEvents: [],
    isMobile: false,
    events: events,
    organizations: organizations,
    eventYears: eventYears,

    init() {
      // Read URL parameters for filters
      const params = new URLSearchParams(window.location.search);
      const orgs = params.get("orgs");
      if (orgs) {
        this.selectedOrgs = orgs.split(",");
      }
      const year = params.get("year");
      if (year && this.eventYears.includes(parseInt(year))) {
        this.currentYear = parseInt(year);
      }
      // Check initial screen size
      this.checkScreenSize();
    },

    checkScreenSize() {
      this.isMobile = window.innerWidth < 1024; // lg breakpoint
    },

    shouldCollapseMonth(year, month) {
      // Only collapse on mobile and only for past months
      if (!this.isMobile) return false;

      const today = new Date();
      const currentYear = today.getFullYear();
      const currentMonth = today.getMonth();

      // If it's not the current year, don't collapse
      if (year !== currentYear) return false;

      // Collapse if the month has completely passed
      return month < currentMonth;
    },

    get yearNavigation() {
      const currentIdx = this.eventYears.indexOf(this.currentYear);
      const nav = [];

      if (currentIdx > 0) {
        nav.push({
          show: true,
          year: this.eventYears[currentIdx - 1],
          label: `← ${this.eventYears[currentIdx - 1]}`,
        });
      }

      if (currentIdx < this.eventYears.length - 1) {
        nav.push({
          show: true,
          year: this.eventYears[currentIdx + 1],
          label: `${this.eventYears[currentIdx + 1]} →`,
        });
      }

      return nav;
    },

    navigateToYear(year) {
      this.currentYear = year;
      this.updateURL();
    },

    toggleOrganization(orgId) {
      const idx = this.selectedOrgs.indexOf(orgId);
      if (idx > -1) {
        this.selectedOrgs.splice(idx, 1);
      } else {
        this.selectedOrgs.push(orgId);
      }
      this.updateURL();
    },

    clearFilters() {
      this.selectedOrgs = [];
      this.updateURL();
    },

    updateURL() {
      const params = new URLSearchParams();
      if (this.selectedOrgs.length > 0) {
        params.set("orgs", this.selectedOrgs.join(","));
      }
      if (this.currentYear !== new Date().getFullYear()) {
        params.set("year", this.currentYear);
      }
      const url = params.toString()
        ? `?${params.toString()}`
        : window.location.pathname;
      window.history.replaceState({}, "", url);
    },

    hasEventsInYear(orgId) {
      return this.events.some(e =>
        e.by === orgId
        && parseInt(e.start_date.substring(0, 4)) === this.currentYear
      );
    },

    shouldShowEvents(eventOrgs) {
      if (this.selectedOrgs.length === 0) return true;
      return eventOrgs.some(org => this.selectedOrgs.includes(org));
    },

    shouldShowEvent(orgId, eventYear, startDate) {
      if (eventYear !== this.currentYear) return false;
      if (this.selectedOrgs.length === 0) {
        // Show upcoming events only for current year
        if (this.currentYear === new Date().getFullYear()) {
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          const eventDate = new Date(startDate + "T00:00:00");
          return eventDate >= today;
        }
        return true;
      }
      return this.selectedOrgs.includes(orgId);
    },

    isPastDate(year, month, day) {
      if (year !== new Date().getFullYear()) return false;
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const date = new Date(year, month, day);
      return date < today;
    },

    isToday(year, month, day) {
      const today = new Date();
      return year === today.getFullYear()
        && month === today.getMonth()
        && day === today.getDate();
    },

    getEventsForDate(dateStr) {
      return this.events.filter(event => {
        const startDate = event.start_date;
        const endDate = event.end_date || startDate;

        // Apply organization filter
        if (
          this.selectedOrgs.length > 0 && !this.selectedOrgs.includes(event.by)
        ) {
          return false;
        }

        return startDate <= dateStr && endDate >= dateStr;
      });
    },

    showEventModal(year, month, day, evt) {
      const monthNames = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ];
      const dateStr = `${year}-${String(month + 1).padStart(2, "0")}-${
        String(day).padStart(2, "0")
      }`;

      // Get events from the button's data attribute or fetch them
      const button = evt ? evt.currentTarget : null;
      let events = [];
      if (button && button.dataset.events) {
        events = JSON.parse(button.dataset.events);
      } else {
        events = this.getEventsForDate(dateStr);
      }

      this.modalTitle = `${monthNames[month]} ${day}, ${year}`;
      this.modalEvents = events.map(e => {
        const org = this.organizations.find(o => o.id === e.by);
        return {
          ...e,
          org: org ? org.name : null,
          orgWebsite: org ? org.website : null,
        };
      });
      this.modalOpen = true;
      document.body.style.overflow = "hidden";
    },

    closeModal() {
      this.modalOpen = false;
      document.body.style.overflow = "";
    },

    addToCalendar(title, startDate, endDate, location, url) {
      // Format dates for Google Calendar (YYYYMMDD)
      const formatDate = (dateStr) => {
        // Ensure date string is in YYYY-MM-DD format
        const cleanDate = dateStr.split("T")[0];
        return cleanDate.replace(/-/g, "");
      };

      // Add one day to end date for Google Calendar (end date is exclusive)
      const getNextDay = (dateStr) => {
        // Parse the date string properly
        const parts = dateStr.split("-");
        const date = new Date(
          parseInt(parts[0]),
          parseInt(parts[1]) - 1,
          parseInt(parts[2]),
        );
        date.setDate(date.getDate() + 1);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const day = String(date.getDate()).padStart(2, "0");
        return `${year}-${month}-${day}`;
      };

      // For Google Calendar, we need to add 1 day to the end date
      const calendarEndDate = getNextDay(endDate || startDate);

      // Create Google Calendar URL
      const baseUrl =
        "https://calendar.google.com/calendar/render?action=TEMPLATE";
      const params = new URLSearchParams({
        text: title,
        dates: `${formatDate(startDate)}/${formatDate(calendarEndDate)}`,
        details: url ? `Event details: ${url}` : "",
        location: location || "",
      });

      // Open in new window
      window.open(`${baseUrl}&${params.toString()}`, "_blank");
    },
  };
}
</script>

<style>
[x-cloak] {
  display: none !important;
}

/* Hide elements before Alpine loads */
[x-show] {
  display: none;
}

/* Show elements once Alpine is ready */
[x-data] [x-show] {
  display: revert;
}
</style>
