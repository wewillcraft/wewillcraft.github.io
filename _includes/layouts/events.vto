---
layout: layouts/base.vto
---

{{ set monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] }}
{{ set shortMonthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"] }}
{{ set weekDays = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] }}

{{# Helper function to get ISO week number #}}
{{ set getISOWeek = (dateStr) => {
  const date = new Date(dateStr + 'T00:00:00');
  const tempDate = new Date(date);
  const dayOfWeek = tempDate.getUTCDay() || 7;
  tempDate.setUTCDate(tempDate.getUTCDate() + 4 - dayOfWeek);
  const yearStart = new Date(Date.UTC(tempDate.getUTCFullYear(), 0, 1));
  const weekNo = Math.ceil(((tempDate - yearStart) / 86400000 + 1) / 7);
  return weekNo;
} }}

{{# Get unique years from events #}}
{{ set eventYears = [] }}
{{ for event of events }}
  {{ set dateStr = typeof event.start_date === 'string' ? event.start_date : event.start_date.toISOString().split('T')[0] }}
  {{ set year = parseInt(dateStr.substring(0, 4)) }}
  {{ if !eventYears.includes(year) }}
    {{ set _ = eventYears.push(year) }}
  {{ /if }}
{{ /for }}
{{ set _ = eventYears.sort() }}

{{# Current year (default to first year with events) #}}
{{ set currentYear = new Date().getFullYear() }}
{{ if !eventYears.includes(currentYear) }}
  {{ set currentYear = eventYears[0] }}
{{ /if }}

<div class="pt-24" x-data="eventsPage()">
  <div class="max-w-6xl mx-auto px-6">
    <header class="mb-8">
      <h1 class="text-4xl sm:text-5xl font-bold text-white mb-4">
        {{ title }} <span x-text="currentYear">{{ currentYear }}</span>
      </h1>
      <p class="text-lg text-gray-300">{{ description }}</p>
    </header>

    {{# Year Navigation #}}
    <div class="flex justify-center mb-8">
      <div class="flex gap-2">
        <template x-for="(yearData, idx) in yearNavigation" :key="idx">
          <button 
            x-show="yearData.show"
            @click="navigateToYear(yearData.year)"
            class="px-4 py-2 bg-white text-gray-800 rounded-lg hover:bg-gray-100 transition-colors font-semibold"
            x-html="yearData.label">
          </button>
        </template>
      </div>
    </div>

    {{# Organization Filter #}}
    <div class="mb-8">
      <div class="flex flex-col sm:flex-row sm:items-center gap-4">
        <label class="text-white font-semibold">Filter by Organization:</label>
        <div class="flex flex-wrap gap-2">
          {{ for org of organizations.sort((a, b) => a.name.localeCompare(b.name)) }}
            <button
              @click="toggleOrganization('{{ org.id }}')"
              :class="selectedOrgs.includes('{{ org.id }}') ? 'bg-blue-600 text-white' : 'bg-white text-gray-800'"
              class="px-3 py-1 rounded-lg transition-colors text-sm hover:opacity-90"
              x-show="hasEventsInYear('{{ org.id }}')"
            >
              {{ org.name }}
            </button>
          {{ /for }}
          <button
            x-show="selectedOrgs.length > 0"
            @click="clearFilters()"
            class="px-3 py-1 bg-red-600 text-white rounded-lg transition-colors text-sm hover:bg-red-700"
          >
            Clear All
          </button>
        </div>
      </div>
    </div>

    {{# Calendar Grid #}}
    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6" id="calendarGrid">
      {{ for year of eventYears }}
        {{ for monthIndex of [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] }}
          {{ set monthName = monthNames[monthIndex] }}
          {{ set daysInMonth = new Date(year, monthIndex + 1, 0).getDate() }}
          {{ set firstDayRaw = new Date(year, monthIndex, 1).getDay() }}
          {{ set firstDay = (firstDayRaw + 6) % 7 }}{{# Convert Sunday=0 to Monday=0 #}}
          
          <div 
            class="bg-white rounded-lg shadow-md overflow-hidden month-card"
            data-year="{{ year }}"
            data-month="{{ monthIndex }}"
            x-show="currentYear === {{ year }}"
          >
            <div class="bg-gray-800 text-white px-4 py-3">
              <h2 class="text-xl font-semibold">{{ monthName }}</h2>
            </div>

            <div class="p-4">
              <div class="grid grid-cols-8 gap-1 text-xs">
                {{# Week day headers #}}
                <div></div>
                {{ for day of weekDays }}
                  <div class="font-semibold text-gray-700 text-center">{{ day }}</div>
                {{ /for }}

                {{# Generate calendar with proper week structure #}}
                
                {{# Calculate total weeks needed #}}
                {{ set totalDays = firstDay + daysInMonth }}
                {{ set totalWeeks = Math.ceil(totalDays / 7) }}
                
                {{# Generate each week row #}}
                {{ for weekIndex of [...Array(totalWeeks).keys()] }}
                  {{# Calculate first day of this week row #}}
                  {{ set weekStartDay = weekIndex * 7 - firstDay + 1 }}
                  {{ set weekEndDay = Math.min(weekStartDay + 6, daysInMonth) }}
                  
                  {{# Add week number for this row #}}
                  {{ if weekStartDay <= daysInMonth }}
                    {{# Get the Monday date for this week row to calculate correct ISO week #}}
                    {{ if weekStartDay < 1 }}
                      {{# This week starts in the previous month, find the Monday #}}
                      {{ set prevMonth = monthIndex === 0 ? 11 : monthIndex - 1 }}
                      {{ set prevYear = monthIndex === 0 ? year - 1 : year }}
                      {{ set daysInPrevMonth = new Date(prevYear, prevMonth + 1, 0).getDate() }}
                      {{ set mondayDate = daysInPrevMonth + weekStartDay }}
                      {{ set weekNum = getISOWeek(`${prevYear}-${String(prevMonth + 1).padStart(2, '0')}-${String(mondayDate).padStart(2, '0')}`) }}
                    {{ else }}
                      {{# Find the Monday of this week (could be in current month) #}}
                      {{ set mondayDay = weekStartDay }}
                      {{ set weekNum = getISOWeek(`${year}-${String(monthIndex + 1).padStart(2, '0')}-${String(mondayDay).padStart(2, '0')}`) }}
                    {{ /if }}
                    <div class="text-gray-400 text-center text-[10px] font-medium self-center">
                      W{{ String(weekNum).padStart(2, '0') }}
                    </div>
                  {{ else }}
                    <div></div>
                  {{ /if }}
                  
                  {{# Generate 7 day cells for this week #}}
                  {{ for dayIndex of [...Array(7).keys()] }}
                    {{ set day = weekIndex * 7 + dayIndex - firstDay + 1 }}
                    
                    {{ if day < 1 || day > daysInMonth }}
                      {{# Empty cell for days outside the month #}}
                      <div></div>
                    {{ else }}
                      {{# Check for events on this day #}}
                      {{ set dateStr = `${year}-${String(monthIndex + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}` }}
                      {{ set dayEvents = events.filter(e => {
                        const startDate = typeof e.start_date === 'string' ? e.start_date : e.start_date.toISOString().split('T')[0];
                        const endDate = e.end_date ? (typeof e.end_date === 'string' ? e.end_date : e.end_date.toISOString().split('T')[0]) : startDate;
                        return startDate <= dateStr && endDate >= dateStr;
                      }) }}
                      
                      {{ set eventOrgs = dayEvents.map(e => `'${e.by}'`) }}
                      {{ set eventOrgsStr = eventOrgs.length > 0 ? `[${eventOrgs.join(',')}]` : '[]' }}
                      
                      <div class="relative calendar-cell" data-date="{{ dateStr }}">
                        {{ if dayEvents.length > 0 }}
                          <button
                            type="button"
                            @click="showEventModal({{ year }}, {{ monthIndex }}, {{ day }}, $event)"
                            class="event-day w-full text-center p-1 rounded font-semibold cursor-pointer transition-colors bg-blue-100 text-blue-900 hover:bg-blue-200"
                            :class="isPastDate({{ year }}, {{ monthIndex }}, {{ day }}) 
                              ? 'bg-gray-100 text-gray-500 hover:bg-gray-200' 
                              : 'bg-blue-100 text-blue-900 hover:bg-blue-200'"
                            x-show="shouldShowEvents({{ eventOrgsStr }})"
                            data-events='{{ JSON.stringify(dayEvents) }}'
                          >
                            {{ day }}
                          </button>
                          <div 
                            x-show="!shouldShowEvents({{ eventOrgsStr }})"
                            class="calendar-day text-center p-1 rounded text-gray-700"
                            :class="isPastDate({{ year }}, {{ monthIndex }}, {{ day }}) ? 'text-gray-400' : 'text-gray-700'"
                          >
                            {{ day }}
                          </div>
                        {{ else }}
                          <div 
                            class="calendar-day text-center p-1 rounded text-gray-700"
                            :class="isPastDate({{ year }}, {{ monthIndex }}, {{ day }}) ? 'text-gray-400' : 'text-gray-700'"
                          >
                            {{ day }}
                          </div>
                        {{ /if }}
                      </div>
                    {{ /if }}
                  {{ /for }}
                {{ /for }}
              </div>
            </div>
          </div>
        {{ /for }}
      {{ /for }}
    </div>

    {{# Events List #}}
    <section class="mt-12">
      <h2 class="text-2xl font-bold text-white mb-6">
        <span x-text="currentYear === new Date().getFullYear() ? 'Upcoming Events' : 'Events'"></span>
      </h2>
      
      <div class="space-y-4">
        {{# Sort events by start_date #}}
        {{ set sortedEvents = events.sort((a, b) => {
          const aDate = typeof a.start_date === 'string' ? a.start_date : a.start_date.toISOString().split('T')[0];
          const bDate = typeof b.start_date === 'string' ? b.start_date : b.start_date.toISOString().split('T')[0];
          return aDate.localeCompare(bDate);
        }) }}
        {{ for event of sortedEvents }}
          {{ set startDateStr = typeof event.start_date === 'string' ? event.start_date : event.start_date.toISOString().split('T')[0] }}
          {{ set eventYear = parseInt(startDateStr.substring(0, 4)) }}
          {{ set eventMonth = parseInt(startDateStr.substring(5, 7)) - 1 }}
          {{ set eventDay = parseInt(startDateStr.substring(8, 10)) }}
          {{ set eventWeek = getISOWeek(startDateStr) }}
          {{ set org = organizations.find(o => o.id === event.by) }}
          
          <div 
            class="event-card bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow"
            x-show="shouldShowEvent('{{ event.by }}', {{ eventYear }}, '{{ startDateStr }}')"
            data-event-org="{{ event.by }}"
            data-event-year="{{ eventYear }}"
            data-event-date="{{ startDateStr }}"
          >
            <div class="flex flex-col md:flex-row md:items-center md:justify-between">
              <div class="flex-1">
                <h3 class="text-xl font-semibold mb-2">
                  <a href="{{ event.website }}" target="_blank" class="text-blue-600 hover:text-blue-800">
                    {{ event.name }}
                  </a>
                </h3>
                <div class="text-gray-600 space-y-1">
                  {{ if org }}
                    <p class="text-sm">
                      Organized by
                      {{ if org.website }}
                        <a href="{{ org.website }}" target="_blank" class="text-blue-600 hover:text-blue-800">{{ org.name }}</a>
                      {{ else }}
                        {{ org.name }}
                      {{ /if }}
                    </p>
                  {{ /if }}
                  {{ if event.city }}
                    <p class="text-sm">📍 {{ event.city }}</p>
                  {{ /if }}
                </div>
              </div>
              <div class="mt-4 md:mt-0 md:text-right">
                <p class="text-lg font-medium text-gray-800">
                  {{ set endDateStr = event.end_date ? (typeof event.end_date === 'string' ? event.end_date : event.end_date.toISOString().split('T')[0]) : startDateStr }}
                  {{ if startDateStr === endDateStr || !event.end_date }}
                    {{ monthNames[eventMonth] }} {{ eventDay }}, {{ eventYear }}
                  {{ else }}
                    {{ set endMonth = parseInt(endDateStr.substring(5, 7)) - 1 }}
                    {{ set endDay = parseInt(endDateStr.substring(8, 10)) }}
                    {{ set endYear = parseInt(endDateStr.substring(0, 4)) }}
                    {{ shortMonthNames[eventMonth] }} {{ eventDay }} -
                    {{ if eventYear !== endYear }}
                      {{ shortMonthNames[endMonth] }} {{ endDay }}, {{ endYear }}
                    {{ else }}
                      {{ shortMonthNames[endMonth] }} {{ endDay }}, {{ eventYear }}
                    {{ /if }}
                  {{ /if }}
                </p>
                <p class="text-sm text-gray-500">
                  {{ eventYear }}, Week {{ eventWeek }}
                </p>
              </div>
            </div>
          </div>
        {{ /for }}
      </div>
    </section>
  </div>

  {{# Event Modal - Must be inside x-data scope #}}
  <div id="eventModal" class="fixed inset-0 z-50" x-show="modalOpen" x-cloak>
    <div class="fixed inset-0 bg-black bg-opacity-50" @click="closeModal()"></div>
    
    <div class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg shadow-2xl w-full max-w-lg max-h-[90vh] overflow-y-auto mx-4">
      <div class="sticky top-0 bg-white border-b px-6 py-4 flex justify-between items-center">
        <h2 class="text-xl font-semibold text-gray-900" x-text="modalTitle"></h2>
        <button @click="closeModal()" class="text-gray-400 hover:text-gray-600 transition-colors" aria-label="Close modal">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div class="px-6 py-4">
        <div class="space-y-4">
          <template x-for="event in modalEvents" :key="event.name">
            <div class="border-l-4 border-blue-500 pl-4 py-2">
              <h3 class="font-semibold text-lg mb-1">
                <a :href="event.website" target="_blank" class="text-blue-600 hover:text-blue-800 transition-colors" x-text="event.name"></a>
              </h3>
              <template x-if="event.org">
                <p class="text-sm text-gray-600 mb-1" x-text="'Organized by ' + event.org"></p>
              </template>
              <template x-if="event.city">
                <p class="text-sm text-gray-600" x-text="'📍 ' + event.city"></p>
              </template>
            </div>
          </template>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
<script>
function eventsPage() {
  return {
    currentYear: {{ currentYear }},
    selectedOrgs: [],
    modalOpen: false,
    modalTitle: '',
    modalEvents: [],
    events: {{ JSON.stringify(events.map(e => ({
      ...e,
      start_date: typeof e.start_date === 'string' ? e.start_date : e.start_date.toISOString().split('T')[0],
      end_date: e.end_date ? (typeof e.end_date === 'string' ? e.end_date : e.end_date.toISOString().split('T')[0]) : null
    }))) }},
    organizations: {{ JSON.stringify(organizations) }},
    eventYears: {{ JSON.stringify(eventYears) }},
    
    init() {
      // Read URL parameters for filters
      const params = new URLSearchParams(window.location.search);
      const orgs = params.get('orgs');
      if (orgs) {
        this.selectedOrgs = orgs.split(',');
      }
      const year = params.get('year');
      if (year && this.eventYears.includes(parseInt(year))) {
        this.currentYear = parseInt(year);
      }
    },
    
    get yearNavigation() {
      const currentIdx = this.eventYears.indexOf(this.currentYear);
      const nav = [];
      
      if (currentIdx > 0) {
        nav.push({
          show: true,
          year: this.eventYears[currentIdx - 1],
          label: `← ${this.eventYears[currentIdx - 1]}`
        });
      }
      
      if (currentIdx < this.eventYears.length - 1) {
        nav.push({
          show: true,
          year: this.eventYears[currentIdx + 1],
          label: `${this.eventYears[currentIdx + 1]} →`
        });
      }
      
      return nav;
    },
    
    navigateToYear(year) {
      this.currentYear = year;
      this.updateURL();
    },
    
    toggleOrganization(orgId) {
      const idx = this.selectedOrgs.indexOf(orgId);
      if (idx > -1) {
        this.selectedOrgs.splice(idx, 1);
      } else {
        this.selectedOrgs.push(orgId);
      }
      this.updateURL();
    },
    
    clearFilters() {
      this.selectedOrgs = [];
      this.updateURL();
    },
    
    updateURL() {
      const params = new URLSearchParams();
      if (this.selectedOrgs.length > 0) {
        params.set('orgs', this.selectedOrgs.join(','));
      }
      if (this.currentYear !== new Date().getFullYear()) {
        params.set('year', this.currentYear);
      }
      const url = params.toString() ? `?${params.toString()}` : window.location.pathname;
      window.history.replaceState({}, '', url);
    },
    
    hasEventsInYear(orgId) {
      return this.events.some(e => 
        e.by === orgId && 
        parseInt(e.start_date.substring(0, 4)) === this.currentYear
      );
    },
    
    shouldShowEvents(eventOrgs) {
      if (this.selectedOrgs.length === 0) return true;
      return eventOrgs.some(org => this.selectedOrgs.includes(org));
    },
    
    shouldShowEvent(orgId, eventYear, startDate) {
      if (eventYear !== this.currentYear) return false;
      if (this.selectedOrgs.length === 0) {
        // Show upcoming events only for current year
        if (this.currentYear === new Date().getFullYear()) {
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          const eventDate = new Date(startDate + 'T00:00:00');
          return eventDate >= today;
        }
        return true;
      }
      return this.selectedOrgs.includes(orgId);
    },
    
    isPastDate(year, month, day) {
      if (year !== new Date().getFullYear()) return false;
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const date = new Date(year, month, day);
      return date < today;
    },
    
    getEventsForDate(dateStr) {
      return this.events.filter(event => {
        const startDate = event.start_date;
        const endDate = event.end_date || startDate;
        
        // Apply organization filter
        if (this.selectedOrgs.length > 0 && !this.selectedOrgs.includes(event.by)) {
          return false;
        }
        
        return startDate <= dateStr && endDate >= dateStr;
      });
    },
    
    showEventModal(year, month, day, evt) {
      const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      
      // Get events from the button's data attribute or fetch them
      const button = evt ? evt.currentTarget : null;
      let events = [];
      if (button && button.dataset.events) {
        events = JSON.parse(button.dataset.events);
      } else {
        events = this.getEventsForDate(dateStr);
      }
      
      this.modalTitle = `${monthNames[month]} ${day}, ${year}`;
      this.modalEvents = events.map(e => {
        const org = this.organizations.find(o => o.id === e.by);
        return {
          ...e,
          org: org ? org.name : null
        };
      });
      this.modalOpen = true;
      document.body.style.overflow = 'hidden';
    },
    
    closeModal() {
      this.modalOpen = false;
      document.body.style.overflow = '';
    }
  };
}
</script>

<style>
  [x-cloak] { display: none !important; }
</style>